.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "RABBITHOLE" "1" "January 2025" "Rabbithole 0.1.1" ""
.hy
.SH NAME
.PP
rabbithole - Fast research tool with auto-copy and search engine routing
.SH SYNOPSIS
.PP
\f[B]rabbithole\f[R] [\f[I]GLOBAL-OPTIONS\f[R]] \f[I]COMMAND\f[R]
[\f[I]COMMAND-OPTIONS\f[R]]
.PP
\f[B]rabbithole\f[R] \f[B]search\f[R] [\f[B]\[en]empty\f[R]]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]add-engine\f[R] \f[I]NAME\f[R] \f[I]URL\f[R]
\f[I]KEY\f[R]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]list-engines\f[R]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]remove-engine\f[R] \f[I]KEY\f[R]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]edit-engine\f[R] \f[I]OLD-KEY\f[R]
\f[I]NAME\f[R] \f[I]URL\f[R] \f[I]NEW-KEY\f[R]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]setup\f[R]
.PD 0
.P
.PD
\f[B]rabbithole\f[R] \f[B]close\f[R]
.SH DESCRIPTION
.PP
\f[B]rabbithole\f[R] is a fast, lightweight Linux tool for academic
research that captures text selections, routes them through configurable
search engines, and tracks exploration patterns.
It provides <50ms response time through hotkey integration with
\f[B]sxhkd(1)\f[R] and maintains research sessions in dedicated browser
windows.
.PP
The core workflow is: select text \[->] press hotkey \[->] choose search
engine from menu \[->] open in dedicated research window.
All searches are logged to SQLite for future analysis and visualization.
.SH COMMANDS
.SS search [\[en]empty]
.PP
Launch the interactive search menu.
By default, attempts to capture selected text from the active window.
If \f[B]\[en]empty\f[R] is specified, starts with an empty query for
manual input.
.PP
The search process: 1.
Captures selected text from PRIMARY or CLIPBOARD selections (unless
\f[B]\[en]empty\f[R]) 2.
Shows \f[B]dmenu(1)\f[R] with available search engines 3.
Opens results in a dedicated, positioned Firefox window 4.
Logs the search to SQLite database
.PP
\f[B]Selection capture\f[R] uses X11 selections safely: - \f[B]PRIMARY
selection\f[R]: Text automatically captured when highlighted -
\f[B]CLIPBOARD selection\f[R]: Text captured after explicit copy
(Ctrl+C) - \f[B]Fallback order\f[R]: PRIMARY \[->] CLIPBOARD \[->]
manual input
.SS add-engine \f[I]NAME\f[R] \f[I]URL\f[R] \f[I]KEY\f[R]
.PP
Add a new search engine to the configuration.
.TP
\f[B]NAME\f[R]
Display name for the search engine (e.g., \[lq]Duck Duck Go\[rq])
.TP
\f[B]URL\f[R]
Search URL template with \f[B]%s\f[R] placeholder for query substitution
.PD 0
.P
.PD
(e.g., \[lq]https://duckduckgo.com/?q=%s\[rq])
.TP
\f[B]KEY\f[R]
Single character shortcut key for dmenu selection (e.g., \[lq]d\[rq])
.PP
The configuration is saved immediately and becomes available for
searches without rebuilding.
.PP
\f[B]Example:\f[R]
.IP
.nf
\f[C]
rabbithole add-engine \[dq]Duck Duck Go\[dq] \[dq]https://duckduckgo.com/?q=%s\[dq] \[dq]d\[dq]
\f[R]
.fi
.SS list-engines
.PP
Display all configured search engines with their keys and URLs.
Shows the current configuration loaded from \f[B]config.json\f[R].
.SS remove-engine \f[I]KEY\f[R]
.PP
Remove a search engine by its shortcut key.
The change is saved immediately to the configuration file.
.SS edit-engine \f[I]OLD-KEY\f[R] \f[I]NAME\f[R] \f[I]URL\f[R] \f[I]NEW-KEY\f[R]
.PP
Update an existing search engine\[cq]s properties.
All four parameters are required:
.TP
\f[B]OLD-KEY\f[R]
Current shortcut key of the engine to modify
.TP
\f[B]NAME\f[R]
New display name
.TP
\f[B]URL\f[R]
New URL template (must contain \f[B]%s\f[R] placeholder)
.TP
\f[B]NEW-KEY\f[R]
New shortcut key (can be the same as old key)
.SS setup
.PP
Generate \f[B]sxhkd(1)\f[R] configuration for rabbithole hotkeys.
Creates \f[B]\[ti]/.config/sxhkd/sxhkdrc\f[R] with the following
bindings:
.IP \[bu] 2
\f[B]Ctrl+Space\f[R]: Search with selected text
.IP \[bu] 2
\f[B]Ctrl+Shift+Space\f[R]: Search with manual input
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Escape\f[R]: Close active research window
.PP
After running setup, start \f[B]sxhkd\f[R] manually or add to your
window manager startup.
.SS close
.PP
Close the currently active research window if it\[cq]s tracked by
rabbithole.
This command is typically triggered by the \f[B]Escape\f[R] hotkey.
.SH CONFIGURATION
.PP
Configuration is stored in \f[B]config.json\f[R] and loaded fresh on
each command execution (hot-reload).
The file is searched in the following locations:
.IP "1." 3
\f[B]./config.json\f[R] (current directory)
.IP "2." 3
\f[B]\[ti]/.config/rabbithole/config.json\f[R]
.PD 0
.P
.PD
.IP "3." 3
\f[B]/etc/rabbithole/config.json\f[R]
.SS Search Engines
.PP
Search engines are defined in the \f[B]search_engines\f[R] array:
.IP
.nf
\f[C]
{
  \[dq]search_engines\[dq]: [
    {
      \[dq]name\[dq]: \[dq]Kagi\[dq],
      \[dq]url\[dq]: \[dq]https://kagi.com/search?q=%s\[dq], 
      \[dq]key\[dq]: \[dq]k\[dq]
    }
  ]
}
\f[R]
.fi
.PP
Each engine requires: - \f[B]name\f[R]: Display name shown in dmenu -
\f[B]url\f[R]: Search URL with \f[B]%s\f[R] placeholder for query
.PD 0
.P
.PD
- \f[B]key\f[R]: Single character shortcut (must be unique)
.SS Interface Configuration
.IP
.nf
\f[C]
{
  \[dq]interface\[dq]: {
    \[dq]launcher\[dq]: \[dq]dmenu\[dq],
    \[dq]dmenu_args\[dq]: [\[dq]-i\[dq], \[dq]-p\[dq], \[dq]Search with:\[dq]]
  }
}
\f[R]
.fi
.IP \[bu] 2
\f[B]launcher\f[R]: Menu program to use (only dmenu supported)
.IP \[bu] 2
\f[B]dmenu_args\f[R]: Additional arguments passed to dmenu
.SS Window Behavior
.IP
.nf
\f[C]
{
  \[dq]behavior\[dq]: {
    \[dq]auto_copy_delay_ms\[dq]: 75,
    \[dq]max_windows\[dq]: 5,
    \[dq]window_width\[dq]: 650,
    \[dq]window_height\[dq]: 900,
    \[dq]firefox_profile\[dq]: \[dq]\[dq],
    \[dq]selection_method\[dq]: \[dq]auto\[dq],
    \[dq]selection_timeout_ms\[dq]: 1000,
    \[dq]log_selections\[dq]: false
  }
}
\f[R]
.fi
.IP \[bu] 2
\f[B]auto_copy_delay_ms\f[R]: Legacy setting (no longer used)
.IP \[bu] 2
\f[B]max_windows\f[R]: Maximum research windows before cleanup
.IP \[bu] 2
\f[B]window_width/height\f[R]: Dimensions for research windows
.IP \[bu] 2
\f[B]firefox_profile\f[R]: Optional Firefox profile for isolation
.IP \[bu] 2
\f[B]selection_method\f[R]: Selection capture behavior
.RS 2
.IP \[bu] 2
\f[C]\[dq]auto\[dq]\f[R]: Try PRIMARY \[->] CLIPBOARD \[->] manual
(default)
.IP \[bu] 2
\f[C]\[dq]primary\[dq]\f[R]: Only PRIMARY \[->] manual
.IP \[bu] 2
\f[C]\[dq]clipboard\[dq]\f[R]: Only CLIPBOARD \[->] manual
.PD 0
.P
.PD
.IP \[bu] 2
\f[C]\[dq]manual\[dq]\f[R]: Always prompt for input
.RE
.IP \[bu] 2
\f[B]selection_timeout_ms\f[R]: Timeout for xsel commands
.IP \[bu] 2
\f[B]log_selections\f[R]: Enable detailed selection capture logging
.SS Database
.IP
.nf
\f[C]
{
  \[dq]database\[dq]: {
    \[dq]path\[dq]: \[dq]\[ti]/.local/share/rabbithole/searches.db\[dq]
  }
}
\f[R]
.fi
.PP
SQLite database path for search logging.
Created automatically if it doesn\[cq]t exist.
.SH HOTKEY INTEGRATION
.PP
\f[B]rabbithole\f[R] is designed to work with \f[B]sxhkd(1)\f[R] for
global hotkey support.
After running \f[B]rabbithole setup\f[R], start sxhkd:
.IP
.nf
\f[C]
sxhkd &
\f[R]
.fi
.PP
Or add to your window manager configuration:
.PP
\f[B]i3wm (\[ti]/.config/i3/config):\f[R]
.IP
.nf
\f[C]
exec --no-startup-id sxhkd
\f[R]
.fi
.PP
\f[B]bspwm (\[ti]/.config/bspwm/bspwmrc):\f[R]
.IP
.nf
\f[C]
sxhkd &
\f[R]
.fi
.SH WINDOW MANAGEMENT
.PP
Research windows are automatically positioned on the right side of the
screen and tracked for session management.
Windows are:
.IP \[bu] 2
Positioned at calculated coordinates based on screen size
.IP \[bu] 2
Limited to \f[B]max_windows\f[R] count with automatic cleanup
.PD 0
.P
.PD
.IP \[bu] 2
Tracked in the database for the \f[B]close\f[R] command
.IP \[bu] 2
Given a distinct window class for identification
.PP
The tool uses \f[B]wmctrl(1)\f[R] and \f[B]xdotool(1)\f[R] for window
manipulation.
.SH DATABASE SCHEMA
.PP
Search data is stored in SQLite with the following structure:
.SS searches table
.IP \[bu] 2
\f[B]id\f[R]: Primary key
.IP \[bu] 2
\f[B]query\f[R]: Search query text
.IP \[bu] 2
\f[B]engine_name\f[R]: Name of search engine used
.IP \[bu] 2
\f[B]engine_url\f[R]: URL template of search engine
.IP \[bu] 2
\f[B]trigger_method\f[R]: `selection' or `manual'
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]timestamp\f[R]: When search was performed
.IP \[bu] 2
\f[B]session_id\f[R]: Daily session identifier
.SS research_windows table
.IP \[bu] 2
\f[B]window_id\f[R]: X11 window ID (hex format)
.IP \[bu] 2
\f[B]created_at\f[R]: Window creation timestamp
.SH FILES
.TP
\f[B]\[ti]/.config/sxhkd/sxhkdrc\f[R]
sxhkd hotkey configuration (created by \f[B]setup\f[R])
.TP
\f[B]config.json\f[R]
Search engine and behavior configuration
.TP
\f[B]\[ti]/.local/share/rabbithole/searches.db\f[R]
SQLite database for search logging
.TP
\f[B]\[ti]/.local/share/rabbithole/rabbithole.log\f[R]
Application log file
.SH DEPENDENCIES
.IP \[bu] 2
\f[B]xsel(1)\f[R]: X11 selection reading (required)
.IP \[bu] 2
\f[B]sxhkd(1)\f[R]: Hotkey daemon
.IP \[bu] 2
\f[B]dmenu(1)\f[R]: Interactive menu
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]firefox(1)\f[R]: Web browser for results
.IP \[bu] 2
\f[B]wmctrl(1)\f[R]: Window manipulation
.IP \[bu] 2
\f[B]xdotool(1)\f[R]: X11 automation
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]xdpyinfo(1)\f[R]: Display information
.PP
Install on Debian/Ubuntu:
.IP
.nf
\f[C]
sudo apt install xsel sxhkd dmenu firefox wmctrl xdotool x11-utils
\f[R]
.fi
.SH EXAMPLES
.SS Basic Setup
.IP
.nf
\f[C]
# Generate sxhkd configuration
rabbithole setup

# Start sxhkd 
sxhkd &

# Now use Ctrl+Space to search selected text
\f[R]
.fi
.SS Search Engine Management
.IP
.nf
\f[C]
# List current engines
rabbithole list-engines

# Add Duck Duck Go
rabbithole add-engine \[dq]Duck Duck Go\[dq] \[dq]https://duckduckgo.com/?q=%s\[dq] \[dq]d\[dq]

# Add arXiv search  
rabbithole add-engine \[dq]arXiv\[dq] \[dq]https://arxiv.org/search/?query=%s\[dq] \[dq]a\[dq]

# Remove an engine
rabbithole remove-engine \[dq]d\[dq]

# Edit existing engine
rabbithole edit-engine \[dq]k\[dq] \[dq]Kagi Search\[dq] \[dq]https://kagi.com/search?q=%s\[dq] \[dq]k\[dq]
\f[R]
.fi
.SS Research Workflow
.PP
\f[B]Method 1 (Instant - PRIMARY selection):\f[R] 1.
\f[B]Highlight text\f[R] in any application (automatically in PRIMARY
selection) 2.
\f[B]Press Ctrl+Space\f[R] (text captured instantly from PRIMARY) 3.
\f[B]Choose engine\f[R] from dmenu (press key like `k' for Kagi) 4.
\f[B]Research window opens\f[R] positioned on right side
.PP
\f[B]Method 2 (Traditional - CLIPBOARD selection):\f[R] 1.
\f[B]Highlight text\f[R] \[->] \f[B]Ctrl+C\f[R] (copies to CLIPBOARD
selection) 2.
\f[B]Press Ctrl+Space\f[R] (text captured from CLIPBOARD) 3.
\f[B]Choose engine\f[R] and continue\&...
.PP
\f[B]Method 3 (Manual):\f[R] 1.
\f[B]Press Ctrl+Shift+Space\f[R] (skip auto-capture) 2.
\f[B]Type/paste query\f[R] manually in dmenu prompt 3.
\f[B]Choose engine\f[R] and continue\&...
.PP
\f[B]Close research windows:\f[R] Press \f[B]Escape\f[R] in any research
window.
.SH EXIT STATUS
.TP
\f[B]0\f[R]
Success
.TP
\f[B]1\f[R]
General error (configuration, dependencies, etc.)
.SH VERSION
.PP
This manual page documents \f[B]rabbithole\f[R] version 0.1.1.
.SH BUGS
.IP \[bu] 2
Window positioning may not work correctly on all window managers
.IP \[bu] 2
Auto-copy feature disabled due to system interference (manual entry
required)
.IP \[bu] 2
X11 only - no Wayland support
.IP \[bu] 2
\f[B]Firefox research windows show expanded vertical tabs:\f[R] Firefox remembers sidebar state globally. If research windows open with expanded vertical tabs: (1) collapse tabs in main Firefox window, (2) close Firefox completely, (3) reopen Firefox to save collapsed state as default.
.IP \[bu] 2
\f[B]Research windows appear too narrow with horizontal tabs:\f[R] Firefox renders windows slightly narrower when using horizontal tabs vs vertical tabs. Enable vertical tabs for optimal sizing, or adjust \f[C]window_width\f[R] in config.json.
.PP
Report bugs at: <https://github.com/user/rabbithole/issues>
.SH SEE ALSO
.PP
\f[B]sxhkd(1)\f[R], \f[B]dmenu(1)\f[R], \f[B]firefox(1)\f[R],
\f[B]wmctrl(1)\f[R], \f[B]xdotool(1)\f[R]
.SH COPYRIGHT
.PP
Copyright 2025 Agustin Fitipaldi.
This is free software; see the source for copying conditions.
.SH AUTHORS
Agustin Fitipaldi.
